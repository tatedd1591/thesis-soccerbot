// Generated by gencpp from file serial_stm32/serial.msg
// DO NOT EDIT!


#ifndef SERIAL_STM32_MESSAGE_SERIAL_H
#define SERIAL_STM32_MESSAGE_SERIAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_stm32
{
template <class ContainerAllocator>
struct serial_
{
  typedef serial_<ContainerAllocator> Type;

  serial_()
    : dir1()
    , dir2()
    , dir3()  {
    }
  serial_(const ContainerAllocator& _alloc)
    : dir1(_alloc)
    , dir2(_alloc)
    , dir3(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dir1_type;
  _dir1_type dir1;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dir2_type;
  _dir2_type dir2;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dir3_type;
  _dir3_type dir3;





  typedef boost::shared_ptr< ::serial_stm32::serial_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_stm32::serial_<ContainerAllocator> const> ConstPtr;

}; // struct serial_

typedef ::serial_stm32::serial_<std::allocator<void> > serial;

typedef boost::shared_ptr< ::serial_stm32::serial > serialPtr;
typedef boost::shared_ptr< ::serial_stm32::serial const> serialConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_stm32::serial_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_stm32::serial_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_stm32::serial_<ContainerAllocator1> & lhs, const ::serial_stm32::serial_<ContainerAllocator2> & rhs)
{
  return lhs.dir1 == rhs.dir1 &&
    lhs.dir2 == rhs.dir2 &&
    lhs.dir3 == rhs.dir3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_stm32::serial_<ContainerAllocator1> & lhs, const ::serial_stm32::serial_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_stm32

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_stm32::serial_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_stm32::serial_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_stm32::serial_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_stm32::serial_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_stm32::serial_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_stm32::serial_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_stm32::serial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00bcf444a943c3a48aff860ffd0aed64";
  }

  static const char* value(const ::serial_stm32::serial_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00bcf444a943c3a4ULL;
  static const uint64_t static_value2 = 0x8aff860ffd0aed64ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_stm32::serial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_stm32/serial";
  }

  static const char* value(const ::serial_stm32::serial_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_stm32::serial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string dir1\n"
"string dir2\n"
"string dir3\n"
;
  }

  static const char* value(const ::serial_stm32::serial_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_stm32::serial_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dir1);
      stream.next(m.dir2);
      stream.next(m.dir3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct serial_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_stm32::serial_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_stm32::serial_<ContainerAllocator>& v)
  {
    s << indent << "dir1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dir1);
    s << indent << "dir2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dir2);
    s << indent << "dir3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dir3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_STM32_MESSAGE_SERIAL_H
