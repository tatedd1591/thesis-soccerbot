// Generated by gencpp from file mqtt_client/RosMsgType.msg
// DO NOT EDIT!


#ifndef MQTT_CLIENT_MESSAGE_ROSMSGTYPE_H
#define MQTT_CLIENT_MESSAGE_ROSMSGTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mqtt_client
{
template <class ContainerAllocator>
struct RosMsgType_
{
  typedef RosMsgType_<ContainerAllocator> Type;

  RosMsgType_()
    : md5()
    , name()
    , definition()  {
    }
  RosMsgType_(const ContainerAllocator& _alloc)
    : md5(_alloc)
    , name(_alloc)
    , definition(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _md5_type;
  _md5_type md5;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _definition_type;
  _definition_type definition;





  typedef boost::shared_ptr< ::mqtt_client::RosMsgType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_client::RosMsgType_<ContainerAllocator> const> ConstPtr;

}; // struct RosMsgType_

typedef ::mqtt_client::RosMsgType_<std::allocator<void> > RosMsgType;

typedef boost::shared_ptr< ::mqtt_client::RosMsgType > RosMsgTypePtr;
typedef boost::shared_ptr< ::mqtt_client::RosMsgType const> RosMsgTypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_client::RosMsgType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_client::RosMsgType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_client::RosMsgType_<ContainerAllocator1> & lhs, const ::mqtt_client::RosMsgType_<ContainerAllocator2> & rhs)
{
  return lhs.md5 == rhs.md5 &&
    lhs.name == rhs.name &&
    lhs.definition == rhs.definition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_client::RosMsgType_<ContainerAllocator1> & lhs, const ::mqtt_client::RosMsgType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_client::RosMsgType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_client::RosMsgType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_client::RosMsgType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_client::RosMsgType_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_client::RosMsgType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_client::RosMsgType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_client::RosMsgType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff43d621269e869c559e9a58071d41e7";
  }

  static const char* value(const ::mqtt_client::RosMsgType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff43d621269e869cULL;
  static const uint64_t static_value2 = 0x559e9a58071d41e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_client::RosMsgType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_client/RosMsgType";
  }

  static const char* value(const ::mqtt_client::RosMsgType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_client::RosMsgType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains information about a ROS Message Type.\n"
"\n"
"string md5          # MD5 sum of ROS message type\n"
"string name         # ROS message type name (e.g. 'std_msgs/Float32')\n"
"string definition   # ROS message type definition (e.g. 'float data')\n"
;
  }

  static const char* value(const ::mqtt_client::RosMsgType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_client::RosMsgType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.md5);
      stream.next(m.name);
      stream.next(m.definition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RosMsgType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_client::RosMsgType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_client::RosMsgType_<ContainerAllocator>& v)
  {
    s << indent << "md5: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.md5);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "definition: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.definition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_CLIENT_MESSAGE_ROSMSGTYPE_H
